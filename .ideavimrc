set ideajoin
set ideamarks=true
set idearefactormode=select
set ideastatusicon=enabled
set ideawrite=all                         
set ideavimsupport=dialog
set clipboard=ideaput

set scroll=10
set incsearch
set ignorecase
set smartcase
set timeoutlen=10000                               
set number
set relativenumber
set showmode
set history=1000
set showcmd
set scrolloff=8
set sidescrolloff=8
set visualbell                              

set which-key                               
set NERDTree                                
set surround                                
set commentary
set highlightedyank
let g:highlightedyank_highlight_duration = '1000'
let g:highlightedyank_highlight_color = 'rgb(86, 71, 151, 100)'



"Modifications
let mapleader = " "
map \r <Action>(IdeaVim.ReloadVimRc.reload)
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap U <C-r>
nmap n nzzzv
nmap N Nzzzv
vnoremap > >gv^
vnoremap < <gv^
" Preserve yanked text while pasting in block mod\
xnoremap p "\"_dP


"Remaps
map Q gq
nnoremap <C-q> :wq<CR>
nnoremap <C-s> :w<CR>
"nnoremap <C-u> <C-u>zz
"nnoremap <C-d> <C-d>zz
nnoremap <C-e> 1jzz
nnoremap <C-y> 1kzz


sethandler <C-space> a:vim
sethandler <C-A> a:vim
sethandler <C-B> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:vim
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:vim
sethandler <C-K> a:vim
sethandler <C-L> a:vim
"sethandler <C-M> a:vim
"sethandler <C-N> a:ide
sethandler <C-O> a:vim
"sethandler <C-P> a:ide
sethandler <C-R> a:vim
sethandler <C-S> a:vim
sethandler <C-T> a:vim
sethandler <C-V> a:vim
sethandler <C-W> a:vim
sethandler <C-Y> a:vim
sethandler <C-Z> a:vim
sethandler <C-[> a:vim
sethandler <C-]> a:vim
sethandler <C-,> a:vim
sethandler <C-.> a:vim
sethandler <C-;> a:vim
sethandler <C-'> a:vim
sethandler <C-U> a:vim

" This did not work.
"map <A-]> <Action>(copilot.cycleNextInlays)
"map <A-]> <Action>(copilot.cyclePrevInlays)

"PANE NAVIGATION 

let g:WhichKeyDesc_window = "<leader>w Pane Management"
nnoremap <C-j> <C-w>j                               
nnoremap <C-k> <C-w>k                               
nnoremap <C-l> <C-w>l                               
nnoremap <C-h> <C-w>h                               
map <leader>wl <Action>(StretchSplitToRight)        
map <leader>wh <Action>(StretchSplitToLeft)         
map <leader>wj <Action>(StretchSplitToBottom)        
map <leader>wk <Action>(StretchSplitToTop)          
map <leader>wf <Action>(MaximizeEditorInSplit)      
map <leader>wo <Action>(ChangeSplitOrientation)     
map <leader>wv <Action>(SplitVertically)            
map <leader>ws <Action>(SplitHorizontally)          
map <leader>wc <Action>(Unsplit)                    
map <leader>wq <Action>(UnsplitAll) 
map <leader>ww <Action>(NextSplitter)

map <leader>wd <Action>(ToggleDistractionFreeMode)
map <leader>wn <Action>(EditSourceInNewWindow)

"TAB NAVIGATION 
let g:WhichKeyDesc_window = "<leader>t Tab Management"
map <Tab> <Action>(NextTab)
map <S-Tab> <Action>(PreviousTab)
map <leader>ts <Action>(MoveEditorToOppositeTabGroup)
map <leader>tc <Action>(CloseContent)
map <leader>tq <Action>(CloseAllEditors)
map <leader>ta <Action>(CloseAllEditorsButActive)
map <leader>tu <Action>(CloseAllUnpinnedEditors)
map <leader>tp <Action>(PinActiveEditorTab)

"NERD TREE NAVIGATION 
let g:WhichKeyDesc_window = "<leader>n Nerd Tree"
map <leader>nn :NERDTree<CR>
map <leader>nc :NERDTreeClose<CR>

let g:NERDTreeMapOpenVSplit='v'
let g:NERDTreeMapPreviewVSplit="gv"
let g:NERDTreeMapOpenSplit='s'
let g:NERDTreeMapPreviewSplit='gs'

"TOOL MENUS 
let g:WhichKeyDesc_window = "<leader>t Tools Menu"
map <leader>m1 <Action>(ActivateProjectToolWindow) 
map <leader>m2 <Action>(ActivateBookmarksToolWindow) 
map <leader>m3 <Action>(ActivateFindToolWindow)
map <leader>m4 <Action>(ActivateRunToolWindow)
map <leader>m5 <Action>(ActivateDebugToolWindow)
map <leader>m6 <Action>(ActivateProblemsViewToolWindow)
map <leader>m7 <Action>(RiderNuGetQuickListPopupAction)
map <leader>m8 <Action>(ActivateUnitTestsToolWindow)
map <leader>m9 <Action>(ActivateVersionControlToolWindow)
map <leader>m0 <Action>(ActivateBuildToolWindow)
map <leader>mt <Action>(ActivateTerminalToolWindow)
map <leader>ms <Action>(ActivateStructureToolWindow)
map <leader>md <Action>(ActivateDatabaseToolWindow)
map <leader>mo <Action>(ActivateCommitToolWindow)
map <leader>mw <Action>(ActivateServicesToolWindow)
map <leader>mm <Action>(JumpToLastWindow)
map <leader>mc <Action>(HideActiveWindow)
map <leader>mq <Action>(HideAllWindows)
"These are not working in vim. These has to be called on tool window"
"map <C-m>h <Action>(ResizeWindowLeft)
"map <C-m>j <Action>(ResizeWindowDown)
"map <C-m>k <Action>(ResizeWindowUp)
"map <C-m>l <Action>(ResizeWindowRight)

"SEARCH & FIND
let g:WhichKeyDesc_window = "<leader>f Find & Search"
map <leader>fj <Action>(FindInPath)
map <leader>fr <Action>(ReplaceInPath)
map <leader>fm <Action>(FileStructurePopup)
map <leader>f, <Action>(RecentFiles) 
map <leader>f; <Action>(RecentChangedFiles)
map <leader>fa <Action>(GotoAction)
map <leader>fs <Action>(GotoSymbol)
map <leader>ff <Action>(GotoFile)
map <leader>fc <Action>(GotoClass) 
map <leader>fi <Action>(SelectIn)
map <leader>ft <Action>(TextSearchAction)

"CODE NAVIGATION
map <C-i> <Action>(Back)
map <C-o> <Action>(Forward)
map g; <Action>(JumpToLastChange)
map g, <Action>(JumpToNextChange)
map ]] <Action>(MethodDown)
map [[ <Action>(MethodUp)
map <C-[> <Action>(EditorCodeBlockStart)
map <C-]> <Action>(EditorCodeBlockEnd)
map ]e <Action>(GotoNextError)
map [e <Action>(GotoPreviousError)
map ]c <Action>(VcsShowNextChangeMarker)
map [c <Action>(VcsShowPrevChangeMarker)
map ]d <Action>(NextDiff)
map [d <Action>(PreviousDiff)

"CODE NAVIGATION - SYMBOLS
let g:WhichKeyDesc_window = "<leader>g Symbol Navigation"
map <leader>gg <Action>(ReSharperNavigateTo)
map <leader>gf <Action>(FindUsages)
map <leader>gu <Action>(ShowUsages)
map <leader>gd <Action>(GotoDeclaration)
map <leader>gs <Action>(GotoSuperMethod)
map <leader>gi <Action>(GotoImplementation)

"CODE NAVIGATION - BOOKMARKS 
map mm <Action>(ToggleBookmark)
map ms <Action>(ShowBookmarks)
map mn <Action>(GotoNextBookmark)
map mp <Action>(GotoPreviousBookmark)

"CODE ANALYSIS & ASSISTANCE
let g:WhichKeyDesc_window = "<leader>i Insert & Inspect"
imap <C-enter> <Action>(CodeCompletion)
nmap <C-enter> <Action>(CodeCompletion)
imap <C-space> <Action>(SmartTypeCompletion)
nmap <C-space> <Action>(SmartTypeCompletion)
map <C-.> <Action>(ShowIntentionActions)
map <C-,> <Action>(ShowErrorDescription)
map <C-;> <Action>(QuickJavaDoc)
map <C-\> <Action>(ParameterInfo)
map <C-f> <Action>(QuickImplementations)
map <leader>ii <Action>(Generate)
map <leader>it <Action>(InspectThis)

"CODE EDITING
let g:WhichKeyDesc_window = "<leader>p Paste"
let g:WhichKeyDesc_window = "<leader>c Copy"
map <leader>pp <Action>(EditorPasteSimple)
map <leader>ph <Action>(PasteMultiple)
map <leader>pc <Action>(RiderPasteJsonAsClasses)
map <leader>pr <Action>(RiderPasteJsonAsRecords)
map <leader>cc <Action>(CopyReferencePopupGroup)
map <leader>cw <Action>(SurroundWithLiveTemplate)
vmap <C-j> <Action>(MoveStatementDown)
vmap <C-k> <Action>(MoveStatementUp)
xmap <C-j> <Action>(MoveStatementDown)
xmap <C-k> <Action>(MoveStatementUp)

"CODE FOLDING
map zo <Action>(ExpandRegionRecursively)
map zr <Action>(ExpandAllRegions)
map zc <Action>(CollapseRegionRecursively)
map zm <Action>(CollapseAllRegions)
map za <Action>(ExpandCollapseToggleAction)
map zf <Action>(CollapseSelection)

"CODE REFACTORING
let g:WhichKeyDesc_window = "<leader>r Refactoring"
map <leader>rt <Action>(Refactorings.QuickListPopupAction)
map <leader>rr <Action>(RenameElement)
map <leader>ri <Action>(Inline)
map <leader>rm <Action>(Move)
map <leader>rf <Action>(IntroduceField)
map <leader>rp <Action>(IntroduceParameter)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rd <Action>(SafeDelete)
map <leader>rs <Action>(ChangeSignature)

"CODE EXTRACTING
let g:WhichKeyDesc_window = "<leader>e Extraction"
map <leader>ep <Action>(RiderBackendAction-Type2Partial)
map <leader>ei <Action>(ExtractInterface)
map <leader>es <Action>(ExtractSuperclass)
map <leader>ec <Action>(RiderBackendAction-ExtractClass)
map <leader>em <Action>(ExtractMethod)

"CODE FORMAT
map == <Action>(ReformatCode)
map =c <Action>(CodeCleanup)
map =s <Action>(SilentCodeCleanup)
map =w <Action>(EditorToggleShowWhitespaces)
map =f <Action>(EditorToggleUseSoftWraps)
map =a <Action>(AutoIndentLines)

"MULTI LINE EDIT
let g:WhichKeyDesc_window = "<leader>s Multi Line Edit
map <leader>sj <Action>(EditorCloneCaretBelow)
map <leader>sk <Action>(EditorCloneCaretAbove)
map <leader>ss <Action>(EditorAddCaretPerSelectedLine)
map <leader>s. <Action>(SelectNextOccurrence)
map <leader>s, <Action>(UnselectPreviousOccurrence)
map <leader>s; <Action>(SelectAllOccurrences)

"UNIT TESTING
let g:WhichKeyDesc_window = "<leader>u Unit Testing"
map <leader>uj <Action>(RiderUnitTestQuickListPopupAction)
map <leader>ur <Action>(RiderUnitTestRunContextAction)
map <leader>ud <Action>(RiderUnitTestDebugContextAction)
map <leader>us <Action>(RiderUnitTestSessionAbortAction)
map <leader>uu <Action>(RiderUnitTestRepeatPreviousRunAction)
map <leader>uf <Action>(RiderUnitTestSessionRerunFailedTestsAction)
map <leader>uw <Action>(RiderUnitTestRunContextUntilFailAction)
map <leader>ul <Action>(RiderUnitTestRunSolutionAction)
map <leader>un <Action>(RiderUnitTestNewSessionAction)
map <leader>ua <ActionRiderUnitTestAppendTestsAction>
map <leader>uy <Action>(RiderUnitTestRunCurrentSessionAction)
" TODO : Find  action name this is placeholder
map <leader>um <Action>(RiderUnitTestRunUnderDotMemory)

"VERSION CONTROL
let g:WhichKeyDesc_window = "<leader>v Version Control"
map <leader>vv <Action>(Vcs.QuickListPopupAction)
map <leader>vc <Action>(CheckinProject)
map <leader>vu <Action>(Vcs.UpdateProject)
map <leader>vr <Action>(ChangesView.Revert)
map <leader>vp <Action>(Vcs.Push)
map <leader>vd <Action>(Compare.SameVersion)
map <leader>vh <Action>(Diff.ApplyLeftSide)
map <leader>vl <Action>(Diff.ApplyRightSide)
map <leader>vs <Action>(Diff.FocusOppositePane)

"RUN & DEBUG
let g:WhichKeyDesc_window = "<leader>d Run & Debug"
map <leader>dd <Action>(Debug)
map <leader>dr <Action>(Run)
map <leader>d. <Action>(Stop)
map <leader>d; <Action>(Pause)
map <leader>d, <Action>(Resume)
map <leader>dl <Action>(StepOver)
map <leader>dL <Action>(ForceStepOver)
map <leader>dj <Action>(SmartStepInto)
map <leader>dJ <Action>(ForceStepInto)
map <leader>dk <Action>(StepOut)
map <leader>dc <Action>(RunToCursor)
map <leader>dC <Action>(ForceRunToCursor)
map <leader>ds <Action>(JumpToStatement)

map <leader>d- <Action>(XDebugger.RemoveWatch)
map <leader>di <Action>(Debugger.AddInlineWatch)
map <leader>dw <Action>(Debugger.AddToWatch)
map <leader>de <Action>(ShowExecutionPoint)
map <leader>df <Action>(QuickEvaluateExpression)

map <leader>xx <Action>(ToggleLineBreakpoint)
map <leader>xt <Action>(ToggleTemporaryLineBreakpoint)
map <leader>xd <Action>(ToggleBreakpointEnabled)
map <leader>xv <Action>(ViewBreakpoints)
map <leader>xe <Action>(EditBreakpoint)
map <leader>xm <Action>(XDebugger.MuteBreakpoints)

"BUILD
let g:WhichKeyDesc_window = "<leader>b Build"
map <leader>bb <Action>(BuildSolutionAction)
map <leader>bp <Action>(BuildCurrentProject)
map <leader>bq <Action>(CancelBuildAction)
map <leader>bc <Action>(CleanSolutionAction)













