{
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(python test:*)",
      "Bash(rg:*)",
      "Bash(python:*)",
      "Bash(grep:*)",
      "Bash(poetry run python:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(poetry run poe:*)",
      "Bash(timeout 30s poetry run poe quick)",
      "Bash(pkill:*)",
      "Bash(timeout 60s poetry run poe quick)",
      "Bash(true)",
      "Bash(poetry run pytest:*)",
      "Bash(poetry run pytest:*)",
      "Bash(poetry run pytest:*)",
      "Bash(poetry run pytest:*)",
      "Bash(sed:*)",
      "Bash(curl:*)",
      "Bash(echo:*)",
      "Bash(timeout 30 poetry run python:*)",
      "Bash(timeout 60 poetry run python:*)",
      "Bash(timeout 5 poetry run python test_new_dashboard.py)",
      "Bash(timeout:*)",
      "Bash(poetry install:*)",
      "Bash(git add:*)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py::TestRewardComponents::test_holding_time_penalty_exceeded -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py::TestRewardComponents::test_overtrading_penalty_exceeded -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py::TestRewardComponents::test_drawdown_penalty_no_drawdown -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py::TestRewardAggregator::test_basic_aggregation -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py::TestRewardSystem::test_get_episode_summary -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_metrics.py -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py -v --tb=short)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_reward_system.py tests/test_reward_metrics.py -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorDayInitialization::test_initialize_day_success -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorEdgeCases::test_malformed_data_handling -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py --tb=no -q)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorIntegration::test_full_day_simulation_workflow -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/ -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorState::test_get_market_state_current_index -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/ -v --tb=short)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_trading_environment.py::TestTradingEnvironment::test_termination_max_loss -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_trading_environment.py::TestTradingEnvironment::test_edge_case_zero_initial_capital -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/ --tb=short)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorState::test_get_market_state_current_index -v -s)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py -x)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 rg \"mid_price\" /Users/fx/Repositories/FxAIv2/simulators/market_simulator.py -A 3 -B 3)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorState -x -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 poetry run pytest tests/test_market_simulator.py::TestMarketSimulatorState -v)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 rg \"trades.*table|DataTable.*data\" /Users/fx/Repositories/FxAIv2/dashboard/ -A 10 -B 5)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 rg -n \"# Recent trades table\" /Users/fx/Repositories/FxAIv2/dashboard/dashboard_server.py -A 30)",
      "Bash(PYTHONPATH=/Users/fx/Repositories/FxAIv2 rg \"PositionSideEnum\" /Users/fx/Repositories/FxAIv2/simulators/ -A 3 -B 3)",
      "Bash(cp:*)",
      "Bash(git checkout:*)",
      "Bash(if [ -d \"best_models/MLGO\" ])",
      "Bash(then mv best_models/MLGO/* cache/model/best/)",
      "Bash(fi)",
      "Bash(poetry lock:*)",
      "Bash([ -d /Users/fx/Repositories/FxAIv2/scripts ])",
      "Bash(chmod:*)",
      "mcp__ide__getDiagnostics",
      "Bash(git rm -r --cached cache/features/)",
      "Bash(poetry --version)",
      "Bash(poetry:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python scripts/validate_pnl_flow.py)",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -m pytest tests/test_portfolio_simulator.py::TestPortfolioInitialization::test_initial_state -v)",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -m pytest tests/test_execution_simulator.py::TestActionDecoding::test_decode_valid_tuple_action -v)",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -c \"from config.schemas import EnvironmentConfig, SimulationConfig, ModelConfig, RewardConfig; print('All configs import successfully!')\")",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -c \"from data.scanner.momentum_scanner import MomentumScanner; from config.schemas import ScannerConfig; s = ScannerConfig(); m = MomentumScanner(s); print('MomentumScanner imports successfully!')\")",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -c \"from data.scanner.momentum_scanner import MomentumScanner; from config.schemas import ScannerConfig; print('Imports work correctly')\")",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -c \"\nfrom config.schemas import EnvironmentConfig, SimulationConfig, ModelConfig, RewardConfig, ScannerConfig, DataConfig, TrainingConfig\nfrom simulators.portfolio_simulator import PortfolioSimulator\nfrom simulators.execution_simulator import ExecutionSimulator\nfrom data.scanner.momentum_scanner import MomentumScanner\nfrom rewards.calculator import RewardCalculator\n\nprint('✅ All main imports successful!')\nprint('✅ Config restructuring complete!')\n\")",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -c \"\nfrom config.schemas import EnvironmentConfig, SimulationConfig, ModelConfig, RewardConfig, ScannerConfig, DataConfig, TrainingConfig\nfrom simulators.portfolio_simulator import PortfolioSimulator\nfrom simulators.execution_simulator import ExecutionSimulator\nfrom data.scanner.momentum_scanner import MomentumScanner\nfrom rewards.calculator import RewardSystem\n\nprint('All main imports successful!')\nprint('Config restructuring complete!')\n\")",
      "Bash(PYTHONPATH=/home/fx/PycharmProjects/fx-ai python -m pytest tests/test_portfolio_simulator.py::TestPortfolioInitialization -v)",
      "Bash(setxkbmap:*)",
      "Bash(npm install:*)",
      "Bash(pyright:*)",
      "Bash(gtimeout:*)",
      "Bash(kill:*)",
      "Bash(for file in /Users/fx/Repositories/FxAIv2/dashboard/panels/*.py)",
      "Bash(do echo \"Checking $file\")",
      "Bash(done)",
      "Bash(pgrep:*)",
      "Bash(git rm:*)",
      "Bash(git filter-branch:*)",
      "Bash(git stash push:*)",
      "Bash(git commit:*)",
      "Bash(git stash:*)",
      "Bash(git push:*)",
      "Bash(PYTHONPATH:*)",
      "Bash(touch:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}